<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Rendall&#39;s blog</title>
	<subtitle>Sketches, thoughts, and observations on all the things. A personal notebook.</subtitle>
	<link href="https://blog.rendall.dev/feed/feed.xml" rel="self"/>
	<link href="https://blog.rendall.dev"/>
	<updated>2019-04-23T03:00:00+03:00</updated>
	<id>https://blog.rendall.tv/</id>
	<author>
		<name>Rendall Koski</name>
		<email>rendall@gmail.com</email>
	</author>
	
	<entry>
		<title>Introduction</title>
		<link href="https://blog.rendall.dev/posts/2018/12/20/introduction/"/>
		<updated>2018-12-20T02:00:00+02:00</updated>
		<id>https://blog.rendall.dev/posts/2018/12/20/introduction/</id>
		<content type="html">&lt;p&gt;Hello.&lt;/p&gt;
&lt;p&gt;My name is Rendall. I am a software developer, father and New York City expatriot living in Finland, so this blog will revolve around these topics. This is a quick introductory post to say hello and set intentions for the blog.&lt;/p&gt;
&lt;p&gt;The first intention is to free my thoughts to the bright light of extrospection, to let myself and others see what has accreted there. Whether interesting, boring, odd, illuminating, useful, insightful, or trite: all will be revealed.&lt;/p&gt;
&lt;p&gt;The second is to commit to committing; never to stealth edit a post, but clearly denote any changes; to be upfront about previous and ongoing mistakes, unwarranted convictions, blunders, misapprehensions and peculiar notions.&lt;/p&gt;
&lt;p&gt;The third is to write more.&lt;/p&gt;
&lt;p&gt;These intentions are for me, and not for you, dear reader. If I quietly correct a typo, for instance, and you drag me for violating my second intention, I will tell you to stuff it.&lt;/p&gt;
&lt;p&gt;This blog is a bit of a continuation of &lt;a href=&quot;https://rendallkoski.blogspot.com/&quot;&gt;another&lt;/a&gt;, but since I am taking ownership of the hosting, coding and designing of this one, it feels like a clean break and true start.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Database vocabulary: ACID</title>
		<link href="https://blog.rendall.dev/posts/2018/12/21/database-vocabulary-acid/"/>
		<updated>2018-12-21T02:00:00+02:00</updated>
		<id>https://blog.rendall.dev/posts/2018/12/21/database-vocabulary-acid/</id>
		<content type="html">&lt;p&gt;Databases are often described in terms of their ACID properties (e.g. &amp;quot;eventual consistency&amp;quot;), so knowing the vocabulary is useful when considering a database solution. Some contemporary database management systems intentionally disregard ACID properties in a tradeoff for other gains.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;ACID&lt;/strong&gt;&lt;/em&gt; is an acronym representing four traits of a database transaction that will guarantee valid data even if the transaction is not completed. Transactions that violate these principles will leave the database in an unknown or invalid state.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Atomicity&lt;/strong&gt;: a transaction must either complete all operations of the transaction or no operations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: a transaction that completes must conform to all and any constraints on the data.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;eventual consistency&lt;/em&gt;: in a distributed database, a change to the data in one instance will take time to propogate to other instances. Eventual consistency means that this change will eventually propogate (&amp;quot;converge&amp;quot;), and all relational constraints and rules will be applied; but before then, anything goes: old, invalid date might be retrieved instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Isolation&lt;/strong&gt;: a transaction&#39;s operations must not influence (be visible to) other transactions until the transaction is complete. Rather, transactions executed at the same time must behave as if they were executed one at a time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Durability&lt;/strong&gt;: the changes made by a completed transaction must be permanent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The influential paper describing these properties is &lt;a href=&quot;https://web.archive.org/web/20170810141540/https://web.stanford.edu/class/cs340v/papers/recovery.pdf&quot;&gt;&amp;quot;Principles of Transaction-Oriented Database Recovery&amp;quot;&lt;/a&gt; by Haerder and Reuter, 1983.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Happy Holidays</title>
		<link href="https://blog.rendall.dev/posts/2018/12/25/happy-holidays/"/>
		<updated>2018-12-25T02:00:00+02:00</updated>
		<id>https://blog.rendall.dev/posts/2018/12/25/happy-holidays/</id>
		<content type="html">&lt;p&gt;Happy Holidays, everyone. I just launched this blog right into the holiday season, and so start with a gap! I hope your holidays are going well.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Problem: Typescript adds Object.defineProperty(exports, &quot;__esModule&quot;, { value: true });</title>
		<link href="https://blog.rendall.dev/posts/2019/1/14/problem-typescript-adds-objectdefinepropertyexports-esmodule-value-true/"/>
		<updated>2019-01-14T02:00:00+02:00</updated>
		<id>https://blog.rendall.dev/posts/2019/1/14/problem-typescript-adds-objectdefinepropertyexports-esmodule-value-true/</id>
		<content type="html">&lt;p&gt;You&#39;re using Typescript in a frontend project, and import a module into your code. Something like:&lt;br&gt;
&lt;code&gt;import { Observable } from &#39;rxjs&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You&#39;re using a bundler like &lt;a href=&quot;https://webpack.js.org/&quot;&gt;&lt;em&gt;Webpack&lt;/em&gt;&lt;/a&gt; that squeezes those modules into a single minimized javascript file, so you want to keep that line as-is.&lt;/p&gt;
&lt;p&gt;However, when Typescript compiles into javascript, it adds the line &lt;code&gt;Object.defineProperty(exports, &amp;quot;__esModule&amp;quot;, { value: true });&lt;/code&gt; which causes an error &lt;code&gt;Uncaught ReferenceError: exports is not defined&lt;/code&gt; or something similar in your browser&#39;s console.&lt;/p&gt;
&lt;p&gt;You search for solutions, but everyone is talking about using &lt;a href=&quot;https://requirejs.org/&quot;&gt;&lt;em&gt;RequireJS&lt;/em&gt;&lt;/a&gt; like it&#39;s 2014!&lt;/p&gt;
&lt;p&gt;You want to get rid of this unwanted &lt;code&gt;Object.defineProperty&lt;/code&gt; line but leave the rest of your code untouched.&lt;/p&gt;
&lt;p&gt;Solution: Modify these two lines in your &lt;code&gt;tsconfig.json&lt;/code&gt; to the following:&lt;br&gt;
&lt;code&gt;&amp;quot;module&amp;quot;: &amp;quot;es6&amp;quot;,&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;quot;lib&amp;quot;: [&amp;quot;dom&amp;quot;,&amp;quot;es6&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Explanation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;commonjs&lt;/code&gt; (the current Typescript default) or one of the other suggested options assumes you are writing a &lt;code&gt;Node.js&lt;/code&gt; application, or&lt;/li&gt;
&lt;li&gt;that you will use a module loader (like &lt;em&gt;RequireJS&lt;/em&gt;) which loads files into your web application at runtime.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es6&lt;/code&gt; is a working standard that will keep your &lt;code&gt;import&lt;/code&gt; line intact.&lt;/li&gt;
&lt;li&gt;But &lt;code&gt;es6&lt;/code&gt; assumes you are importing from a javascript file (e.g. &lt;code&gt;import { this } from &#39;./that.js&#39;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;However, you are using a package manager, you hipster, and that module is not in an external javascript file, but is sitting in a &lt;code&gt;node_modules&lt;/code&gt; directory somewhere waiting for your package bundler to roll it on up.&lt;/li&gt;
&lt;li&gt;Typescript sees the &lt;code&gt;es6&lt;/code&gt; module style, but not the &lt;code&gt;es6&lt;/code&gt; lib, and so believes you are loading an external javascript file. This is why you need to add the &lt;code&gt;es6&lt;/code&gt; to &lt;code&gt;lib:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;But once you enable &lt;code&gt;lib:&lt;/code&gt;, the browser-specific code in your typescript will break without the &lt;code&gt;dom&lt;/code&gt; library, so you need to add that, too.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Step-by-step: Still need help? Follow these instructions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;If you do not have a &lt;code&gt;tsconfig.json&lt;/code&gt;:&lt;/em&gt; In your project directory, type &lt;code&gt;tsc --init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;tsconfig.json&lt;/code&gt; file, find the line starting &lt;code&gt;module:&lt;/code&gt; and change its value to &lt;code&gt;es6&lt;/code&gt; like so: &lt;code&gt;&amp;quot;module&amp;quot;: &amp;quot;es6&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Further down, find the line starting &lt;code&gt;lib:&lt;/code&gt; and add &lt;code&gt;dom&lt;/code&gt; and &lt;code&gt;es6&lt;/code&gt; to the array, like so: &lt;code&gt;&amp;quot;lib&amp;quot;: [&amp;quot;dom&amp;quot;,&amp;quot;es6&amp;quot;]&lt;/code&gt;. Make sure to uncomment it if necessary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;More info:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://json.schemastore.org/tsconfig&quot;&gt;The &lt;code&gt;tsconfig.json&lt;/code&gt; schema&lt;/a&gt; contains all of the options for every key-value pair, including:&lt;/li&gt;
&lt;li&gt;Current &lt;code&gt;module&lt;/code&gt; options (one of): &lt;code&gt;&amp;quot;commonjs&amp;quot;, &amp;quot;amd&amp;quot;, &amp;quot;umd&amp;quot;, &amp;quot;system&amp;quot;, &amp;quot;es6&amp;quot;, &amp;quot;es2015&amp;quot;, &amp;quot;esnext&amp;quot;,&lt;/code&gt; or &lt;code&gt;&amp;quot;none&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Current &lt;code&gt;lib&lt;/code&gt; options (any combination of): &lt;code&gt;&amp;quot;es5&amp;quot;, &amp;quot;es6&amp;quot;, &amp;quot;es2015&amp;quot;, &amp;quot;es7&amp;quot;, &amp;quot;es2016&amp;quot;, &amp;quot;es2017&amp;quot;, &amp;quot;es2018&amp;quot;, &amp;quot;esnext&amp;quot;, &amp;quot;dom&amp;quot;, &amp;quot;dom.iterable&amp;quot;, &amp;quot;webworker&amp;quot;, &amp;quot;scripthost&amp;quot;, &amp;quot;es2015.core&amp;quot;, &amp;quot;es2015.collection&amp;quot;, &amp;quot;es2015.generator&amp;quot;, &amp;quot;es2015.iterable&amp;quot;, &amp;quot;es2015.promise&amp;quot;, &amp;quot;es2015.proxy&amp;quot;, &amp;quot;es2015.reflect&amp;quot;, &amp;quot;es2015.symbol&amp;quot;, &amp;quot;es2015.symbol.wellknown&amp;quot;, &amp;quot;es2016.array.include&amp;quot;, &amp;quot;es2017.object&amp;quot;, &amp;quot;es2017.intl&amp;quot;, &amp;quot;es2017.sharedmemory&amp;quot;, &amp;quot;es2017.string&amp;quot;, &amp;quot;es2017.typedarrays&amp;quot;, &amp;quot;es2018.intl&amp;quot;, &amp;quot;es2018.promise&amp;quot;, &amp;quot;es2018.regexp&amp;quot;, &amp;quot;esnext.asynciterable&amp;quot;, &amp;quot;esnext.array&amp;quot;, &amp;quot;esnext.intl&amp;quot;, &amp;quot;esnext.symbol&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Class notes: Mastering Git</title>
		<link href="https://blog.rendall.dev/posts/2019/1/26/class-notes-mastering-git/"/>
		<updated>2019-01-26T02:00:00+02:00</updated>
		<id>https://blog.rendall.dev/posts/2019/1/26/class-notes-mastering-git/</id>
		<content type="html">&lt;p&gt;These are my class notes to &lt;a href=&quot;https://twitter.com/nusco&quot;&gt;Paolo Perrotta&lt;/a&gt;&#39;s excellent and entertaining video course &lt;em&gt;&lt;a href=&quot;https://app.pluralsight.com/library/courses/mastering-git&quot;&gt;Mastering Git&lt;/a&gt;&lt;/em&gt;, comprising 8 videos of 2 hours 45 minutes total. I recently took up the &lt;a href=&quot;https://developer.microsoft.com/en-us/collective&quot;&gt;Microsoft Dev Collective&lt;/a&gt;&#39;s offer for a 30-day free trial of &lt;a href=&quot;https://www.pluralsight.com/&quot;&gt;Pluralsight&lt;/a&gt; and this was one of several that I enjoyed. I highly recommend this course if you are familiar with git, but even a little unclear on how git works. Especially if, like me, you use the same git commands every day with only a vague notion of what they do. Signore Perrotta explains everything brilliantly.&lt;/p&gt;
&lt;p&gt;git tracks changes in 4 places:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;working directory&lt;/em&gt; - this is the project directory in the OS file structure&lt;/li&gt;
&lt;li&gt;&lt;em&gt;index&lt;/em&gt; - a.k.a the staging area&lt;/li&gt;
&lt;li&gt;&lt;em&gt;repository&lt;/em&gt; - in the &lt;code&gt;.git&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;&lt;em&gt;stash&lt;/em&gt; - a kind of scratch pad or clipboard for the developer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2 questions which will completely define and explain any command:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How does this command move information across the 4 areas?&lt;/li&gt;
&lt;li&gt;How does this command change the repository?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some useful git log commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git log --graph --decorate --oneline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --patch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log -- &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Distributed Workflow patterns. This is the social side of git: how git users on a team use it. These are useful terms for fruitful discussion.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Distribution models: how sourcecode is shared among repositories
&lt;ul&gt;
&lt;li&gt;Peer-to-peer: developers pulling from each other&#39;s repositories&lt;/li&gt;
&lt;li&gt;Centralized: one repository holds the canonical version&lt;/li&gt;
&lt;li&gt;Pull-request model: devs do not push directly, but request&lt;/li&gt;
&lt;li&gt;hierarchical model: some devs are gatekeepers to canonical repositories&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Branching models: how branches are used
&lt;ul&gt;
&lt;li&gt;Stable versus unstable (does a branch allow broken code?)&lt;/li&gt;
&lt;li&gt;Integration (is there a &amp;quot;master&amp;quot; branch to which all repos merge/rebase?)&lt;/li&gt;
&lt;li&gt;Release branch&lt;/li&gt;
&lt;li&gt;Feature branch&lt;/li&gt;
&lt;li&gt;Hotfix branch (versus cherry-pick, which is a rebase)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Constraints: allowed, disallowed and preferred methods
&lt;ul&gt;
&lt;li&gt;Merge versus rebase (messy truth versus clean inaccuracy)&lt;/li&gt;
&lt;li&gt;Gatekeeping and responsibility (do some devs have privs)&lt;/li&gt;
&lt;li&gt;&amp;quot;Don&#39;t push when the build is broken&amp;quot; (CI error)&lt;/li&gt;
&lt;li&gt;clean history before push to integration?&lt;/li&gt;
&lt;li&gt;Every pull request linked to an issue/ticket number&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gitflow: such an &lt;a href=&quot;https://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;influential model&lt;/a&gt; deserves separate discussion&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don&#39;t &amp;quot;just use Gitflow&amp;quot;. It is not optimal for every project, e.g.:
&lt;ul&gt;
&lt;li&gt;web apps that need to maintain only one release branch&lt;/li&gt;
&lt;li&gt;project with continuous integration in which features released immediately, Gitflow has too many layers&lt;/li&gt;
&lt;li&gt;projects with long term feature development
&lt;ul&gt;
&lt;li&gt;large code bases touching everywhere could cause integration headaches&lt;/li&gt;
&lt;li&gt;perhaps better to integrate often, even when features are not yet complete&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Growing a workflow: Avoid designing a complete workflow from the beginning, but start small and grow it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sample starter workflow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Distribution model: Centralized&lt;/li&gt;
&lt;li&gt;Branching model:
&lt;ul&gt;
&lt;li&gt;One integration branch (master)&lt;/li&gt;
&lt;li&gt;One feature branch per feature&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Constraints:
&lt;ul&gt;
&lt;li&gt;Keep master stable, fix ASAP if it breaks&lt;/li&gt;
&lt;li&gt;Integrate feature branches every few days&lt;/li&gt;
&lt;li&gt;User merge over rebase by default&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;quot;Simple, clear purpose and principles give rise to complex intelligent behavior. Complex rules and regulations give rise to simple stupid behavior.&amp;quot;&lt;/p&gt;
&lt;p&gt;-- Dee Hock&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Personal thoughts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Other constraints I have seen:&lt;/li&gt;
&lt;li&gt;Merge feature branches into the master branch, but clean up with interactive rebase the history of the branch before doing so.&lt;/li&gt;
&lt;li&gt;Do not rebase the history of the master branch.&lt;/li&gt;
&lt;li&gt;Features that are not released yet should be hidden by default, to be turned on with an internal flag&lt;/li&gt;
&lt;li&gt;Branches should have an associated issue number, and commit messages should reference that number (required a githook to enforce)&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Class notes: Build Your Own RxJS Pipeable Operators</title>
		<link href="https://blog.rendall.dev/posts/2019/1/27/class-notes-build-your-own-rxjs-pipeable-operators/"/>
		<updated>2019-01-27T02:00:00+02:00</updated>
		<id>https://blog.rendall.dev/posts/2019/1/27/class-notes-build-your-own-rxjs-pipeable-operators/</id>
		<content type="html">&lt;p&gt;I took &lt;a href=&quot;https://egghead.io/instructors/john-lindquist&quot;&gt;John Lindquist&lt;/a&gt;&#39;s online video course &lt;a href=&quot;https://egghead.io/courses/build-your-own-rxjs-pipeable-operators&quot;&gt;Build Your Own RxJS Pipeable Operators&lt;/a&gt; which comprises 12 videos in 31 minutes total. Yep, that is fast! While I can recommend the course if you&#39;re interested in RxJS 6, you do need some experience with RxJS, and Lindquist is super speedy necessitating frequent pauses.&lt;/p&gt;
&lt;p&gt;The course covers what it says right on the tin: how to construct your own RxJS pipe operators, which I found useful for both getting a grasp on RxJS and for writing more expressively in RxJS. These are the class notes. The meat of this post and that course is in these pieces of (Typescript) code:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;makeRxJSOperator&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;source&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Observable&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;  source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sub&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; source&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sub&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// This function makeRxJSOperator is my own twist on the instructor&#39;s main trick, which is to use&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// `lift` to subscribe an instance of a Subscriber class to the source Observable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; yourNewPipeOperator &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeRxJSOperator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SubscriberClass&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// yourNewPipeOperator is now a function which takes an Observable and returns another Observable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// which you can use like this:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;inputStream$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;yourNewPipeOperator&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; anotherPipeOperator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dataresult:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;SubscriberClass&lt;/code&gt; looks like this (fill in your blanks):&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SubscriberClass&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscriber&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Subscriber&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscriber&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;_next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;// this.destination.next(someVal) is how a value is passed to the next pipe operator&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;// it does not necessarily need to be in _next. It could, for example, be in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;// the end of an asynch callback or Promise chain&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;destination&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;// &#39;modify&#39; here represents some hypothetical modification to &#39;value&#39;, if any&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;_complete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;_error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lindquist uses this construction to reproduce several of the canonical operators, &lt;code&gt;mergeMap&lt;/code&gt;, &lt;code&gt;switchMap&lt;/code&gt; and &lt;code&gt;concatMap&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Practically, it can be used like this:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; audioPlayerHandler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeRxJSOperator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AudioPlayer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; recorderHandler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeRxJSOperator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Recorder&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; blobToBase64 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeRxJSOperator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;BlobToBase64&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; speechToTextHander &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeRxJSOperator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SpeechToText&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// which are components of this interaction chain, rather like a Promise chain:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;buttonClick$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;audioRecordHandler&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; audioPlayerHandler&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; blobToBase64&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; speechToTextHander&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dataresult:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have actually written the line above, with the &lt;code&gt;Recorder&lt;/code&gt; Subscriber class reproduced here for example:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// This class accepts the state of a &#39;record&#39; button&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// through its _next method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// and then causes side effects depending on the toggle state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Recorder&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; _stream&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;MediaStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; _recorder&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;MediaRecorder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaRecorder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscriber&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Subscriber&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscriber&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;     &lt;span class=&quot;token function&quot;&gt;_next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buttonState&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buttonState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;RECORD&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;STOP&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;     &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;onDataAvailable&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;BlobEvent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; blob &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Blob&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;type&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;audio/ogg;codecs=opus&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;destination&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;blob&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// If the user wants to &#39;RECORD&#39;, the microphone is accessed and begins&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// recording audio. A new &#39;MediaRecorder&#39; instance is created and a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// handler attached to its &#39;onDataAvailable&#39; event&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mediaDevices&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUserMedia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;audio&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_stream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; stream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_recorder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaRecorder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_stream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;audioBitsPerSecond&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;12000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_recorder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;dataavailable&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onDataAvailable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mime:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_recorder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mimeType&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_recorder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;audioBitsPerSecond&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_recorder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// When the user presses &#39;STOP&#39;, the microphone is turned off and, through&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// event handling (qv. onDataHandling), the raw audio data is passed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// to the next observer in the chain.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_recorder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A lot of state is encapsulated and disposed of within this class. It is difficult to even imagine how one would accomplish this using the provided RxJS operators. For instance, the line &lt;code&gt;navigator.mediaDevices.getUserMedia&lt;/code&gt; should never be called except through user interaction, otherwise the user sees an annoying popup immediately after landing on the page itself. Without a laborious workaround, this line will be called immediately when &lt;code&gt;.subscribe&lt;/code&gt; is called on the entire chain.&lt;/p&gt;
&lt;p&gt;But, all that said, I am still much of a newbie when it comes to RxJS, and so, perhaps, I would find all of this baroque or unnecessary were I more of an expert. I absolutely welcome instruction, if you know a better way.&lt;/p&gt;
&lt;p&gt;Also, as an aside, Lindquist uses &lt;a href=&quot;https://quokkajs.com/&quot;&gt;Quokka&lt;/a&gt; to show immediate feedback from his code changes, which is rather nifty.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to webfont</title>
		<link href="https://blog.rendall.dev/posts/2019/1/30/how-to-webfont/"/>
		<updated>2019-01-30T02:00:00+02:00</updated>
		<id>https://blog.rendall.dev/posts/2019/1/30/how-to-webfont/</id>
		<content type="html">&lt;p&gt;This is a quick guide to get a webfont into your website with some attention to web performance and is intended as a starting point for small sites that will write in a Latin alphabet. At the end of the post are some resources for further optimizations, if you choose.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, get your font. This site uses &lt;a href=&quot;https://fonts.google.com/specimen/Montserrat&quot;&gt;&lt;em&gt;Montserrat&lt;/em&gt;&lt;/a&gt; but there are lots of other groovy options over at &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google fonts&lt;/a&gt;. There are other nifty sites for free fonts, too. If this is your site&#39;s text font, grab the files that represent the &lt;em&gt;regular&lt;/em&gt;, &lt;em&gt;italic&lt;/em&gt;, &lt;em&gt;bold&lt;/em&gt; and &lt;em&gt;bold italic&lt;/em&gt; versions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, download the font files and host them yourself. &lt;strong&gt;Do not&lt;/strong&gt; just throw the link into your html &lt;code&gt;head&lt;/code&gt; tag like this &lt;code&gt;&amp;lt;link href=&amp;quot;https://fonts.googleapis.com/css?family=Open+Sans&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;&lt;/code&gt;. Among many reasons for not doing this, you would badly slow down your site&#39;s load time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Third&lt;/strong&gt;, &lt;em&gt;optimize&lt;/em&gt; your font! &lt;a href=&quot;https://www.fontsquirrel.com/tools/webfont-generator&quot;&gt;Font Squirrel&lt;/a&gt; is good enough and has a good reputation, but there are other online optimizine services and programs. Your font likely has glyphs and such that you will &lt;em&gt;never&lt;/em&gt; use! Get those out of there!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upload all of the font files you downloaded in the second step to &lt;a href=&quot;https://www.fontsquirrel.com/tools/webfont-generator&quot;&gt;Font Squirrel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Select all of the font formats except &lt;code&gt;EOT lite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If your font files are TrueType, select &lt;code&gt;TrueType hinting: Keep Existing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check &lt;code&gt;Spaces&lt;/code&gt; and &lt;code&gt;Hyphens&lt;/code&gt; in &lt;code&gt;Fix Missing Glyphs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you have a fallback font, and you do, pick it in &lt;code&gt;X-height Matching&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;Subsetting&lt;/code&gt; choose &lt;code&gt;custom&lt;/code&gt;. This is where you toss most of your font file size.
&lt;ul&gt;
&lt;li&gt;Important: deselect as much as you can. Start with nothing selected.&lt;/li&gt;
&lt;li&gt;If this is a display font for just the header or logotype
&lt;ul&gt;
&lt;li&gt;Under &lt;code&gt;Single Characters&lt;/code&gt; add only those characters you will use&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If this is your website&#39;s text font, select these:
&lt;ul&gt;
&lt;li&gt;Lowercase&lt;/li&gt;
&lt;li&gt;Uppercase&lt;/li&gt;
&lt;li&gt;Numbers&lt;/li&gt;
&lt;li&gt;Punctuation&lt;/li&gt;
&lt;li&gt;(maybe) Currency&lt;/li&gt;
&lt;li&gt;Look at &lt;code&gt;Subset Preview&lt;/code&gt; to make sure that you have all the glyphs you will need&lt;/li&gt;
&lt;li&gt;Add anything missing in &lt;code&gt;Single Characters&lt;/code&gt;, e.g: &lt;code&gt;ÄÖÅäöåé&lt;/code&gt; (for this site)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Enter a memorable name under &lt;code&gt;CSS: CSS Filename&lt;/code&gt;, e.g. &lt;code&gt;fonts.css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check the &lt;code&gt;Agreement&lt;/code&gt; assuming your fonts are legal (and they are, if you got them from the Google site)&lt;/li&gt;
&lt;li&gt;Then &lt;code&gt;Download your kit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Fourth&lt;/strong&gt;, unzip and open up your css file (e.g. &lt;code&gt;fonts.css&lt;/code&gt;). There are a few modifications you will need to make, here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change all of the &lt;code&gt;font-family&lt;/code&gt; values to the same value.
&lt;ul&gt;
&lt;li&gt;(e.g. Change &lt;code&gt;font-family: &#39;montserratbold&#39;&lt;/code&gt; to &lt;code&gt;font-family: &#39;Montserrat&#39;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Under each &lt;code&gt;@font-face&lt;/code&gt; declaration change &lt;code&gt;font-weight&lt;/code&gt; and &lt;code&gt;font-style&lt;/code&gt; as appropriate
&lt;ul&gt;
&lt;li&gt;For the &lt;em&gt;bold&lt;/em&gt; version of your font, change &lt;code&gt;font-weight&lt;/code&gt; to &lt;code&gt;bold&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For the &lt;em&gt;italic&lt;/em&gt; version of your font, change &lt;code&gt;font-style&lt;/code&gt; to &lt;code&gt;italic&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For the &lt;em&gt;italic&lt;/em&gt; and &lt;em&gt;bold&lt;/em&gt; version of your font, change them both&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Change every &lt;code&gt;url&lt;/code&gt; value to be relative to the &lt;code&gt;css&lt;/code&gt; file
&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;url(&#39;../fonts/montserrat-bold.eot&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Inside of each &lt;code&gt;@font-face&lt;/code&gt; declaration, add either line: &lt;code&gt;font-display: swap;&lt;/code&gt; or &lt;code&gt;font-display: optional;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Or not. Read more about &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display&quot;&gt;&lt;code&gt;font-display&lt;/code&gt; here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Fifth&lt;/strong&gt;, paste the &lt;code&gt;@font-face&lt;/code&gt; declarations into your site&#39;s stylesheet, and move the fonts into your project directory structure. Again, make sure that the paths in the &lt;code&gt;url&lt;/code&gt; are relative to the &lt;code&gt;css&lt;/code&gt; file that contains the &lt;code&gt;@font-face&lt;/code&gt; declarations, and &lt;em&gt;not&lt;/em&gt;, for example, to the webpage that links to it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sixth&lt;/strong&gt;, wire up your &lt;code&gt;html&lt;/code&gt; tags to the font files, using the name you chose for them in the fourth step. e.g. &lt;code&gt;html { font-family: &amp;quot;Montserrat&amp;quot;, Arial, Helvetica, sans-serif;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Troubleshooting: fire up your browser and see if the fonts are being loaded. If not, the &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/&quot;&gt;developer console&lt;/a&gt; should tell you whence it seeks them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt;, you have definitely degraded the load time and performance of your site. You have to decide whether it&#39;s &lt;em&gt;good enough&lt;/em&gt; or if you need further optimizations.&lt;/p&gt;
&lt;p&gt;Here are some relatively recent (as of writing) articles about the topic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zachleat.com/web/font-checklist/&quot;&gt;https://www.zachleat.com/web/font-checklist/&lt;/a&gt; (Zach Leatherman has done a lot of work in the space of optimizing webfont loading.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://frontendnews.io/editions/2018-07-25-tips-for-loading-web-fonts&quot;&gt;https://frontendnews.io/editions/2018-07-25-tips-for-loading-web-fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.malthemilthers.com/font-loading-strategy-acceptable-flash-of-invisible-text/&quot;&gt;https://www.malthemilthers.com/font-loading-strategy-acceptable-flash-of-invisible-text/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sitepoint.com/optimizing-web-fonts-for-performance-the-state-of-the-art/&quot;&gt;https://www.sitepoint.com/optimizing-web-fonts-for-performance-the-state-of-the-art/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Top-level domain change: rendall.dev</title>
		<link href="https://blog.rendall.dev/posts/2019/3/3/top-level-domain-change-rendalldev/"/>
		<updated>2019-03-03T02:00:00+02:00</updated>
		<id>https://blog.rendall.dev/posts/2019/3/3/top-level-domain-change-rendalldev/</id>
		<content type="html">&lt;p&gt;For years my website and freelance company has been &lt;code&gt;rendall.tv&lt;/code&gt;. Today that changes to &lt;code&gt;rendall.dev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I registered a domain name and crafted a website way back in the early 00s, right after undergrad, as many of us do, as a way to promote myself and showcase projects I had been involved with. The design was kitsch from the start. One might have called it &lt;a href=&quot;https://web.archive.org/web/20170811000534/http://rendall.tv/&quot;&gt;&lt;em&gt;ironic urban cowboy&lt;/em&gt;&lt;/a&gt;. The original brown-and-tan color scheme came from a drop-down list in freaking &lt;em&gt;Macromedia &lt;em&gt;Dreamweaver&lt;/em&gt;&lt;/em&gt;! And thus it sat for years, changing only very slightly, as more than a decade passed, even as the world&#39;s taste, and my own, changed. For years I paid $35 USD per month to an aging hosting company, and that more than anything else seems as archaic as dial-up.&lt;/p&gt;
&lt;p&gt;The domain change and design change also corresponds to a personal shift in me that has been ongoing for some few years now. It is difficult to put into words, but it corresponds to a kind of increased seriousness of purpose or narrowing of focus. Software development in years past for me has been a way to make a decent income and have fun while doing it. While this is still true, software development has also become a way of life, both vocation and avocation. I don&#39;t want to predict what this internal shift means for the future (if anything!), or rhapsodize about the &lt;em&gt;passion&lt;/em&gt; (such an overused cliche of a word!) I feel for software development, but on some level it feels like I am waking up. To what, I do not know yet. To possibility, perhaps. There is so much happening, so many possibilities, so much talented activity.&lt;/p&gt;
&lt;p&gt;The current design of this site is not in its final form by any means. It is now minimalist and cold with very little to recommend it, visually speaking. That will change in time. Slowly, but not as slowly as &lt;code&gt;rendall.tv&lt;/code&gt;!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Thoughts on Technical Interviews and Challenges</title>
		<link href="https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/"/>
		<updated>2019-04-23T03:00:00+03:00</updated>
		<id>https://blog.rendall.dev/posts/2019/4/23/thoughts-on-technical-interviews-and-challenges/</id>
		<content type="html">&lt;p&gt;A technical interview can be a learning experience for all, or it can be a grim, soul-sucking grind. The first path will lead to an effective team, and the second will lead to a dysfunctional team; this is an exorable, near-mathematical inevitability. Think deeply about how your interview process will lead to the team your company deserves.&lt;/p&gt;
&lt;p&gt;This post talks in general about the second interview in the overwhelmingly popular two-interview format, where the first is a &#39;culture fit&#39; interview of an hour or two, and the second is the technical interview of about the same duration.&lt;/p&gt;
&lt;p&gt;Here I discuss both a general philosophy and a specific, actionable approach to technical interview design, to make interviews effective, enjoyable and ethical.&lt;/p&gt;
&lt;h3 id=&quot;effectiveness&quot;&gt;Effectiveness &lt;a class=&quot;direct-link&quot; href=&quot;#effectiveness&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Briefly, let&#39;s define an &lt;em&gt;effective&lt;/em&gt; interview process for a particular job as that which will identify the best, or even an adequate, candidate for that job. An interview can do this by drawing as accurate a &amp;quot;map&amp;quot; as reasonably possible of what a candidate can do, technically speaking.&lt;/p&gt;
&lt;p&gt;A secondary goal, but still important, is to leave the candidate with a positive feeling about your company, even if the process does not end in a job offer.&lt;/p&gt;
&lt;h3 id=&quot;the-map-is-not-the-territory&quot;&gt;The Map Is Not The Territory &lt;a class=&quot;direct-link&quot; href=&quot;#the-map-is-not-the-territory&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is a limit to how effective any evaluation can be, in the same way that a map cannot effectively show everything that&#39;s in the land it represents. In a map, all fractal irregularity of coastlines, street cracks, ant-hills and rotten post fences are subsumed in an abstract overview best suited for getting a car from &lt;em&gt;here&lt;/em&gt; to &lt;em&gt;there&lt;/em&gt;. There is nothing in a map about the beauty of a forest pond, the intimidation of a steep incline, the dangerousness of a particular intersection, nor who makes the best mojitos in town.&lt;/p&gt;
&lt;p&gt;In the same way, an interview is not the job, with all of its daily grinds, challenges and triumphs. A job interview rarely covers, for instance, that which interviewers do not know they do not know, the &amp;quot;unknown unknowns&amp;quot;; on the contrary, interviewers almost always confirm their own and their employer&#39;s biases. The interview process format of having a culture fit interview of 2 hours or so, followed by a technical interview, is about as effective at finding a great match as going on a great first date and then deciding to move in together.&lt;/p&gt;
&lt;p&gt;Understanding and accounting for this inherent lack of accuracy or precision must be part of any interview process.  That said, there are some things we can do to make the whole situation easier.&lt;/p&gt;
&lt;h3 id=&quot;humility-and-respect&quot;&gt;Humility and Respect &lt;a class=&quot;direct-link&quot; href=&quot;#humility-and-respect&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A quick note about courtesy and respect: have it. Even, and especially, for those candidates who do not do well during the interview. There are many reasons a candidate might flounder that have nothing to do with their technical abilities. Resist any temptation to revel in your power over your temporary ability to give another person a hard time: this is the moment you shine by being humble and kind. You are representing your company and your own personal morals. Not much more need be said. Either this already makes sense to you, or your life has already gone off the rails.&lt;/p&gt;
&lt;p&gt;It also absolutely needs to be said, if the candidate is talented at what they do, you need to internalize well that they are evaluating your company at the same time. Even if they are nervous and submissive and seem rather desperate, and even if you believe your interview process is infallible, you must jettison the notion that they are a petitioner for your scarce resource. A candidate&#39;s rejection for the position is very rarely viewed as a failure, but it could very well be. Talent is a scarcer resource than your unfilled positions. Stay humble.&lt;/p&gt;
&lt;h3 id=&quot;similarity&quot;&gt;Similarity &lt;a class=&quot;direct-link&quot; href=&quot;#similarity&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One goal of a well-designed interview process is to compare candidates. Only by having a similar interview format, with candidates having similar experiences, discussion topics and questions, can you even hope to have a basis to compare candidates accurately. If each interview is different and depends wholly on the mood and whims of the interviewers, there is really no basis to compare candidates&#39; technical skill (in contrast to the &lt;em&gt;culture fit&lt;/em&gt; interview, which can be more unique and wide-ranging).&lt;/p&gt;
&lt;h3 id=&quot;agenda&quot;&gt;Agenda &lt;a class=&quot;direct-link&quot; href=&quot;#agenda&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Have an agenda, and have it be reasonably the same for each interview, in keeping with the principle of similarity. Write it down. Have the interview agenda be documented, and decided, around the same time you write the job description. Hand a copy of it to the candidate at the beginning of the interview. Everyone should know what is going to happen. It can even have some of the technical questions and terms you will cover during the interview.&lt;/p&gt;
&lt;p&gt;Here is one template for an agenda:&lt;/p&gt;
&lt;h4 id=&quot;general-introductions&quot;&gt;General introductions &lt;a class=&quot;direct-link&quot; href=&quot;#general-introductions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The candidate is offered water, coffee or snacks. The interviewers and candidate introduce themselves, talk about who they are. This is really just to get people chatting. It&#39;s not very important what is said at this point. These are the normal introductions by which strangers transform into acquaintences. Ice-breaking, jokes, stories are great! Then the interviewers present the agenda and go over it with the candidate. The goal here is to relax. Remember, you want the candidate at their best.&lt;/p&gt;
&lt;p&gt;I like to state up front that, while there is time at the end of the interview for candidate&#39;s questions, that this is a conversation, and the candidate is interviewing the company as well. &amp;quot;Please, feel free to ask questions of us at any time, not just at the end.&amp;quot;&lt;/p&gt;
&lt;h4 id=&quot;general-tech-discussion&quot;&gt;General tech discussion &lt;a class=&quot;direct-link&quot; href=&quot;#general-tech-discussion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Ease the candidate into the topic of tech by asking them to talk about anything at all they find interesting in tech: perhaps a recent controversy, observation, trend, intriguing library or exciting project. Anything, really. As with the introduction, what is said here is not extremely important; the goal here is to ease the candidate&#39;s transition from outside concerns into a tech mindset. The interviewers can ask follow-up questions, but again, the goal is not test the candidate&#39;s knowledge, but to have a relaxed candidate. Nothing the candidate says here will be wrong. Also, bear in mind: having a candidate talk about their past projects is one of the least effective ways to evaluate their skill.&lt;/p&gt;
&lt;p&gt;That said, there are some things the interviewers can start to notice. This is an opportunity for them to talk about what they are passionate about in technology, if anything. Even so, you don&#39;t know this person very well at this point, so you don&#39;t know what &#39;passion&#39; looks like for them, you don&#39;t know what they sound like when they&#39;re passionate. Do they talk in a monotone about everything? Are they excitable people who sound passionate about literally everything? You don&#39;t know, and so, do not place too great an emphasis on this section.&lt;/p&gt;
&lt;h4 id=&quot;resume-%2F-cv-%2F-past-experiences&quot;&gt;Resume / CV / past experiences &lt;a class=&quot;direct-link&quot; href=&quot;#resume-%2F-cv-%2F-past-experiences&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Here the interview can get a bit more detailed, covering specific questions about duties or projects in the past. Have these written down, and these will necessarily be different for each candidate. While you can start with softball questions like &amp;quot;What is your proudest technical achievement?&amp;quot;, you should begin to turn to specifics. What were the projects you worked on in your last job? Why did you make those technical choices you did in your last project? Did you consider other options? If so, why did you reject them?&lt;/p&gt;
&lt;p&gt;Still friendly, always, but the interview has begun. We are now about 15 or 20 minutes into the interview, and this phase goes for 10 or 20 minutes, depending on their experience.&lt;/p&gt;
&lt;h4 id=&quot;break%3F&quot;&gt;Break? &lt;a class=&quot;direct-link&quot; href=&quot;#break%3F&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Offer a break of 5 to 10 minutes. It&#39;s about to get intense.&lt;/p&gt;
&lt;h4 id=&quot;technical-questions&quot;&gt;Technical questions &lt;a class=&quot;direct-link&quot; href=&quot;#technical-questions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If you&#39;re looking for a specific kind of technical expertise, or if the candidate claims expertise, this is where you probe their knowledge. Ask questions with clearly right or wrong answers: &amp;quot;What is the event loop?&amp;quot; &amp;quot;What is a monad?&amp;quot; &amp;quot;What is the difference between a left outer join and an inner join?&amp;quot;&lt;/p&gt;
&lt;p&gt;The temptation that many interviewers seem to have, here, is to assume a stern expresson and fire questions at the candidate in an intentionally unsettling manner, interrupting before they are finished. Resist doing this. The process is unsettling enough, and you are not evaluating a candidate&#39;s ability to withstand a hazing. You want the candidate at their best. Unsettling the candidate reflects badly on the company and is ineffective at finding clear technical thinkers. I have met geniuses who are rattled by a &#39;hello&#39;, but are sweet and dedicated.&lt;/p&gt;
&lt;p&gt;Never tell someone they have done well with a question when they have not.&lt;/p&gt;
&lt;p&gt;This part can take anywhere from 20 minutes to 45 minutes or longer.&lt;/p&gt;
&lt;h4 id=&quot;break!&quot;&gt;Break! &lt;a class=&quot;direct-link&quot; href=&quot;#break!&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Mandatory break. 5-15 minutes. It&#39;s about to get really intense. Encourage them to have a snack. Keep water in the room.&lt;/p&gt;
&lt;h4 id=&quot;coding-exercise&quot;&gt;Coding exercise &lt;a class=&quot;direct-link&quot; href=&quot;#coding-exercise&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;It is essential to have a coding exercise as a part of a technical interview process. Not doing this is a crap shoot. Or Russian roulette. Coding is where the rubber meets the road. Not evaluating a programmer&#39;s ability to program is an extremely poor decision, no matter their background.&lt;/p&gt;
&lt;p&gt;That said, some interviewers resist giving any kind of coding exercise because they point out, not without merit, that a coding exercise is so unlike the job itself that a coding exercise is no better than a dice roll. I see that point. Still, give the simplest coding exercise you can and then disregard it completely, if you like. It&#39;s closer to the needs of the job than just talking about tech.&lt;/p&gt;
&lt;p&gt;If the coding exercise is during the interview, be very clear and consistent about what is to happen, whatever that is. e.g. &amp;quot;We will present a problem. Outline a solution on the whiteboard. We are less interested in a correct solution than in seeing how you think through problems, so communicate verbally as you solve it.&amp;quot;  Or, &amp;quot;Here is a small coding problem. We will leave you alone for an hour as you solve it.&amp;quot;&lt;/p&gt;
&lt;p&gt;The topic of coding exercises is vast, and I won&#39;t do more than touch on it here. Entire articles, books, blogs and video channels are dedicated to the topic, so it does at least deserve its own (necessarily incomplete) section. More about that below.&lt;/p&gt;
&lt;h4 id=&quot;break!-2&quot;&gt;Break! &lt;a class=&quot;direct-link&quot; href=&quot;#break!-2&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Yes, another 5 minute break. They might need a few minutes to collect themselves.&lt;/p&gt;
&lt;h4 id=&quot;debrief%2C-feedback&quot;&gt;Debrief, feedback &lt;a class=&quot;direct-link&quot; href=&quot;#debrief%2C-feedback&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Give them the opportunity to talk about the interview process itself. Solicit feedback about how the interview &lt;em&gt;process&lt;/em&gt; itself could have gone better. They also might have some feelings about their performance. This is where you can identify ways to improve and even lend a sympathetic ear. If they have done poorly, do not rush them out the door or be impatient. Answer their questions until the end of your allotted time. Tell them about what next steps will be.&lt;/p&gt;
&lt;p&gt;If you like them, talk about how great it is to work at your company.&lt;/p&gt;
&lt;h4 id=&quot;departure&quot;&gt;Departure &lt;a class=&quot;direct-link&quot; href=&quot;#departure&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Regardless of your evaluation, shake their hands and &lt;em&gt;look them in the eye&lt;/em&gt;. They honored you with their time. Respect that.&lt;/p&gt;
&lt;h3 id=&quot;coding-exercise-2&quot;&gt;Coding exercise &lt;a class=&quot;direct-link&quot; href=&quot;#coding-exercise-2&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As said before, some kind of coding exercise is essential. And, likewise, doing poorly on any particular exercise does not mean that they would be bad at the job, or bad at programming: only that they did poorly on an exercise. It is possible that the interview process or the test itself is poorly designed. I view coding exercises as but one channel to understand a candidate; an important channel, but only one.&lt;/p&gt;
&lt;p&gt;There are many different formats for coding exercises: whiteboard exercise, take-home projects, multiple-choice tests, pair-programming, verbal questions about terminology. Here I&#39;ll only write some general principles, and get specific only about &lt;em&gt;take-home projects&lt;/em&gt; for now.&lt;/p&gt;
&lt;h4 id=&quot;generally&quot;&gt;Generally &lt;a class=&quot;direct-link&quot; href=&quot;#generally&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Coding exercises should be the same for all candidates, in accordance with the Principle of Similarity, in order to accurately compare performance. An ad-hoc exercise, custom-designed for a particular candidate will not lead to an accurate evaluation.&lt;/li&gt;
&lt;li&gt;If the coding exercise has a clear, unambiguous, correct answer, then consider having unit tests. This eliminates biases about coding style, doubts about whether some particular solution can work, and misinterpretation of the result.&lt;/li&gt;
&lt;li&gt;If the coding exercise does not have a clear, unambiguous correct answer, then consider having clear, unambiguous acceptance criteria.&lt;/li&gt;
&lt;li&gt;Overall, leave more time for any exercise than might be usual. Yes, the question might be very easy under normal circumstances, but these are not normal circumstances.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;take-home-projects&quot;&gt;Take-home projects &lt;a class=&quot;direct-link&quot; href=&quot;#take-home-projects&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A take-home project reveals a lot about your company, so consider it carefully.&lt;/p&gt;
&lt;p&gt;Unless you pay the client, a take-home project or exam must not be intended to take more than an hour or so. It might take the candidate more than an hour, but that&#39;s their business. It must - &lt;em&gt;must&lt;/em&gt; - be designed sincerely to take no more than an hour. Do the project yourself, or have a respected developer do it, and if it takes longer than an hour, scale it back.&lt;/p&gt;
&lt;p&gt;It &lt;em&gt;must&lt;/em&gt; have very clear acceptance criteria, preferably actual unit- or end-to-end tests. It must only evaluate the skill-set the candidate will be hired for. No UXD for a front-end engineer, for instance.&lt;/p&gt;
&lt;p&gt;I will explain why in the form of advice to your candidate: If a company sends you a project that takes hours, or does not have clear acceptance criteria, this is a company that is unambiguously and clearly telling you that they will not respect your time and will have unclear, shifting and non-existent acceptance criteria in their day-to-day operations. If you receive a test like this, run. You have been warned.&lt;/p&gt;
&lt;p&gt;Needless to say, if your take-home project has a deadline, ask the candidate when they would like to begin.&lt;/p&gt;
&lt;h3 id=&quot;preparation&quot;&gt;Preparation &lt;a class=&quot;direct-link&quot; href=&quot;#preparation&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Apparently, it needs to be said: be well-prepared and on time. Here is how to do that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go through the candidate&#39;s application and CV, and decide what experience-related questions you will ask.&lt;/li&gt;
&lt;li&gt;Print out any needed materials like agendas, copies of the CV, and coding exercises.&lt;/li&gt;
&lt;li&gt;Make sure that the interview room is booked and has fresh dry-erase markers, erasers, and a pitcher of water.&lt;/li&gt;
&lt;li&gt;Send an email to the candidate about what they can expect. Attach the agenda if possible.
&lt;ul&gt;
&lt;li&gt;If the candidate needs to bring any materials, then tell them.
&lt;ul&gt;
&lt;li&gt;e.g. portfolio, source code, links to previous work&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DO NOT rely on the candidate&#39;s having laptop unless you have specifically requested they bring one.&lt;/li&gt;
&lt;li&gt;Do not request that candidates bring a laptop, anyway. Supply one, if necessary.
&lt;ul&gt;
&lt;li&gt;Perhaps they develop on a desktop. They might have to borrow or buy one. This is no poor reflection on them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the candidate will need a computer or other equipment, make sure that it is set up and working.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;miscellany&quot;&gt;Miscellany &lt;a class=&quot;direct-link&quot; href=&quot;#miscellany&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Do not mention how many interviews you need to get through.&lt;/li&gt;
&lt;li&gt;Do not hold interviews if you have no intention of filling the job.&lt;/li&gt;
&lt;li&gt;Do not ask candidates to rate their experience with some specific technology. The &lt;a href=&quot;https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect&quot;&gt;Dunning-Kruger Effect&lt;/a&gt; guarantees your experienced candidates will underrate themselves and your less experienced candidates will overrate themselves.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;conclusion-%2F-tl%3Bdr&quot;&gt;Conclusion / TL;DR &lt;a class=&quot;direct-link&quot; href=&quot;#conclusion-%2F-tl%3Bdr&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Be kind. Be relentless. Be human. The way you treat people in the interview will exactly reflect the team you build. Dysfunction begins and ends with the hiring process. If your company wants highly effective, talented developers, then craft an interview process that reflects a highly effective, talented company.&lt;/p&gt;
</content>
	</entry>
</feed>
