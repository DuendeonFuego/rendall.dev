<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Rendall&#39;s Blog</title>
	<subtitle>Sketches, thoughts, and observations on all the things. A personal notebook.</subtitle>
	<link href="https://blog.rendall.tv/feed/feed.xml" rel="self"/>
	<link href="https://blog.rendall.tv"/>
	<updated>2019-01-26T02:00:00+02:00</updated>
	<id>https://blog.rendall.tv/</id>
	<author>
		<name>Rendall Koski</name>
		<email>rendall@gmail.com</email>
	</author>
	
	<entry>
		<title>Introduction</title>
		<link href="https://blog.rendall.tv/posts/2018/12/20/introduction/"/>
		<updated>2018-12-20T02:00:00+02:00</updated>
		<id>https://blog.rendall.tv/posts/2018/12/20/introduction/</id>
		<content type="html">&lt;p&gt;Hello.&lt;/p&gt;
&lt;p&gt;My name is Rendall. I am a software developer, father and New York City expatriot living in Finland, so this blog will revolve around these topics. This is a quick introductory post to say hello and set intentions for the blog.&lt;/p&gt;
&lt;p&gt;The first intention is to free my thoughts to the bright light of extrospection, to let myself and others see what has accreted there. Whether interesting, boring, odd, illuminating, useful, insightful, or trite: all will be revealed.&lt;/p&gt;
&lt;p&gt;The second is to commit to committing; never to stealth edit a post, but clearly denote any changes; to be upfront about previous and ongoing mistakes, unwarranted convictions, blunders, misapprehensions and peculiar notions.&lt;/p&gt;
&lt;p&gt;The third is to write more.&lt;/p&gt;
&lt;p&gt;These intentions are for me, and not for you, dear reader. If I quietly correct a typo, for instance, and you drag me for violating my second intention, I will tell you to stuff it.&lt;/p&gt;
&lt;p&gt;This blog is a bit of a continuation of &lt;a href=&quot;https://rendallkoski.blogspot.com/&quot;&gt;another&lt;/a&gt;, but since I am taking ownership of the hosting, coding and designing of this one, it feels like a clean break and true start.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Database vocabulary: ACID</title>
		<link href="https://blog.rendall.tv/posts/2018/12/21/database-vocabulary-acid/"/>
		<updated>2018-12-21T02:00:00+02:00</updated>
		<id>https://blog.rendall.tv/posts/2018/12/21/database-vocabulary-acid/</id>
		<content type="html">&lt;p&gt;Databases are often described in terms of their ACID properties (e.g. &amp;quot;eventual consistency&amp;quot;), so knowing the vocabulary is useful when considering a database solution. Some contemporary database management systems intentionally disregard ACID properties in a tradeoff for other gains.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;ACID&lt;/strong&gt;&lt;/em&gt; is an acronym representing four traits of a database transaction that will guarantee valid data even if the transaction is not completed. Transactions that violate these principles will leave the database in an unknown or invalid state.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Atomicity&lt;/strong&gt;: a transaction must either complete all operations of the transaction or no operations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: a transaction that completes must conform to all and any constraints on the data.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;eventual consistency&lt;/em&gt;: in a distributed database, a change to the data in one instance will take time to propogate to other instances. Eventual consistency means that this change will eventually propogate (&amp;quot;converge&amp;quot;), and all relational constraints and rules will be applied; but before then, anything goes: old, invalid date might be retrieved instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Isolation&lt;/strong&gt;: a transaction&#39;s operations must not influence (be visible to) other transactions until the transaction is complete. Rather, transactions executed at the same time must behave as if they were executed one at a time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Durability&lt;/strong&gt;: the changes made by a completed transaction must be permanent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The influential paper describing these properties is &lt;a href=&quot;https://web.archive.org/web/20170810141540/https://web.stanford.edu/class/cs340v/papers/recovery.pdf&quot;&gt;&amp;quot;Principles of Transaction-Oriented Database Recovery&amp;quot;&lt;/a&gt; by Haerder and Reuter, 1983.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Happy Holidays</title>
		<link href="https://blog.rendall.tv/posts/2018/12/25/happy-holidays/"/>
		<updated>2018-12-25T02:00:00+02:00</updated>
		<id>https://blog.rendall.tv/posts/2018/12/25/happy-holidays/</id>
		<content type="html">&lt;p&gt;Happy Holidays, everyone. I just launched this blog right into the holiday season, and so start with a gap! I hope your holidays are going well.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Problem: Typescript adds Object.defineProperty(exports, &quot;__esModule&quot;, { value: true });</title>
		<link href="https://blog.rendall.tv/posts/2019/1/14/problem-typescript-adds-objectdefinepropertyexports-esmodule-value-true/"/>
		<updated>2019-01-14T02:00:00+02:00</updated>
		<id>https://blog.rendall.tv/posts/2019/1/14/problem-typescript-adds-objectdefinepropertyexports-esmodule-value-true/</id>
		<content type="html">&lt;p&gt;You&#39;re using Typescript in a frontend project, and import a module into your code. Something like:&lt;br&gt;
&lt;code&gt;import { Observable } from &#39;rxjs&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You&#39;re using a bundler like &lt;a href=&quot;https://webpack.js.org/&quot;&gt;&lt;em&gt;Webpack&lt;/em&gt;&lt;/a&gt; that squeezes those modules into a single minimized javascript file, so you want to keep that line as-is.&lt;/p&gt;
&lt;p&gt;However, when Typescript compiles into javascript, it adds the line &lt;code&gt;Object.defineProperty(exports, &amp;quot;__esModule&amp;quot;, { value: true });&lt;/code&gt; which causes an error &lt;code&gt;Uncaught ReferenceError: exports is not defined&lt;/code&gt; or something similar in your browser&#39;s console.&lt;/p&gt;
&lt;p&gt;You search for solutions, but everyone is talking about using &lt;a href=&quot;https://requirejs.org/&quot;&gt;&lt;em&gt;RequireJS&lt;/em&gt;&lt;/a&gt; like it&#39;s 2014!&lt;/p&gt;
&lt;p&gt;You want to get rid of this unwanted &lt;code&gt;Object.defineProperty&lt;/code&gt; line but leave the rest of your code untouched.&lt;/p&gt;
&lt;p&gt;Solution: Modify these two lines in your &lt;code&gt;tsconfig.json&lt;/code&gt; to the following:&lt;br&gt;
&lt;code&gt;&amp;quot;module&amp;quot;: &amp;quot;es6&amp;quot;,&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;quot;lib&amp;quot;: [&amp;quot;dom&amp;quot;,&amp;quot;es6&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Explanation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;commonjs&lt;/code&gt; (the current Typescript default) or one of the other suggested options assumes you are writing a &lt;code&gt;Node.js&lt;/code&gt; application, or&lt;/li&gt;
&lt;li&gt;that you will use a module loader (like &lt;em&gt;RequireJS&lt;/em&gt;) which loads files into your web application at runtime.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es6&lt;/code&gt; is a working standard that will keep your &lt;code&gt;import&lt;/code&gt; line intact.&lt;/li&gt;
&lt;li&gt;But &lt;code&gt;es6&lt;/code&gt; assumes you are importing from a javascript file (e.g. &lt;code&gt;import { this } from &#39;./that.js&#39;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;However, you are using a package manager, you hipster, and that module is not in an external javascript file, but is sitting in a &lt;code&gt;node_modules&lt;/code&gt; directory somewhere waiting for your package bundler to roll it on up.&lt;/li&gt;
&lt;li&gt;Typescript sees the &lt;code&gt;es6&lt;/code&gt; module style, but not the &lt;code&gt;es6&lt;/code&gt; lib, and so believes you are loading an external javascript file. This is why you need to add the &lt;code&gt;es6&lt;/code&gt; to &lt;code&gt;lib:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;But once you enable &lt;code&gt;lib:&lt;/code&gt;, the browser-specific code in your typescript will break without the &lt;code&gt;dom&lt;/code&gt; library, so you need to add that, too.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Step-by-step: Still need help? Follow these instructions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;If you do not have a &lt;code&gt;tsconfig.json&lt;/code&gt;:&lt;/em&gt; In your project directory, type &lt;code&gt;tsc --init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;tsconfig.json&lt;/code&gt; file, find the line starting &lt;code&gt;module:&lt;/code&gt; and change its value to &lt;code&gt;es6&lt;/code&gt; like so: &lt;code&gt;&amp;quot;module&amp;quot;: &amp;quot;es6&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Further down, find the line starting &lt;code&gt;lib:&lt;/code&gt; and add &lt;code&gt;dom&lt;/code&gt; and &lt;code&gt;es6&lt;/code&gt; to the array, like so: &lt;code&gt;&amp;quot;lib&amp;quot;: [&amp;quot;dom&amp;quot;,&amp;quot;es6&amp;quot;]&lt;/code&gt;. Make sure to uncomment it if necessary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;More info:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://json.schemastore.org/tsconfig&quot;&gt;The &lt;code&gt;tsconfig.json&lt;/code&gt; schema&lt;/a&gt; contains all of the options for every key-value pair, including:&lt;/li&gt;
&lt;li&gt;Current &lt;code&gt;module&lt;/code&gt; options (one of): &lt;code&gt;&amp;quot;commonjs&amp;quot;, &amp;quot;amd&amp;quot;, &amp;quot;umd&amp;quot;, &amp;quot;system&amp;quot;, &amp;quot;es6&amp;quot;, &amp;quot;es2015&amp;quot;, &amp;quot;esnext&amp;quot;,&lt;/code&gt; or &lt;code&gt;&amp;quot;none&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Current &lt;code&gt;lib&lt;/code&gt; options (any combination of): &lt;code&gt;&amp;quot;es5&amp;quot;, &amp;quot;es6&amp;quot;, &amp;quot;es2015&amp;quot;, &amp;quot;es7&amp;quot;, &amp;quot;es2016&amp;quot;, &amp;quot;es2017&amp;quot;, &amp;quot;es2018&amp;quot;, &amp;quot;esnext&amp;quot;, &amp;quot;dom&amp;quot;, &amp;quot;dom.iterable&amp;quot;, &amp;quot;webworker&amp;quot;, &amp;quot;scripthost&amp;quot;, &amp;quot;es2015.core&amp;quot;, &amp;quot;es2015.collection&amp;quot;, &amp;quot;es2015.generator&amp;quot;, &amp;quot;es2015.iterable&amp;quot;, &amp;quot;es2015.promise&amp;quot;, &amp;quot;es2015.proxy&amp;quot;, &amp;quot;es2015.reflect&amp;quot;, &amp;quot;es2015.symbol&amp;quot;, &amp;quot;es2015.symbol.wellknown&amp;quot;, &amp;quot;es2016.array.include&amp;quot;, &amp;quot;es2017.object&amp;quot;, &amp;quot;es2017.intl&amp;quot;, &amp;quot;es2017.sharedmemory&amp;quot;, &amp;quot;es2017.string&amp;quot;, &amp;quot;es2017.typedarrays&amp;quot;, &amp;quot;es2018.intl&amp;quot;, &amp;quot;es2018.promise&amp;quot;, &amp;quot;es2018.regexp&amp;quot;, &amp;quot;esnext.asynciterable&amp;quot;, &amp;quot;esnext.array&amp;quot;, &amp;quot;esnext.intl&amp;quot;, &amp;quot;esnext.symbol&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Class notes: Mastering Git</title>
		<link href="https://blog.rendall.tv/posts/2019/1/26/class-notes-mastering-git/"/>
		<updated>2019-01-26T02:00:00+02:00</updated>
		<id>https://blog.rendall.tv/posts/2019/1/26/class-notes-mastering-git/</id>
		<content type="html">&lt;p&gt;These are my class notes to &lt;a href=&quot;https://twitter.com/nusco&quot;&gt;Paolo Perrotta&lt;/a&gt;&#39;s excellent and entertaining video course &lt;em&gt;&lt;a href=&quot;https://app.pluralsight.com/library/courses/mastering-git&quot;&gt;Mastering Git&lt;/a&gt;&lt;/em&gt;, comprising 8 videos of 2 hours 45 minutes total. I recently took up the &lt;a href=&quot;https://developer.microsoft.com/en-us/collective&quot;&gt;Microsoft Dev Collective&lt;/a&gt;&#39;s offer for a 30-day free trial of &lt;a href=&quot;https://www.pluralsight.com/&quot;&gt;Pluralsight&lt;/a&gt; and this was one of several that I enjoyed. I highly recommend this course if you are familiar with git, but even a little unclear on how git works. Especially if, like me, you use the same git commands every day with only a vague notion of what they do. Signore Perrotta explains everything brilliantly.&lt;/p&gt;
&lt;p&gt;git tracks changes in 4 places:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;working directory&lt;/em&gt; - this is the project directory in the OS file structure&lt;/li&gt;
&lt;li&gt;&lt;em&gt;index&lt;/em&gt; - a.k.a the staging area&lt;/li&gt;
&lt;li&gt;&lt;em&gt;repository&lt;/em&gt; - in the &lt;code&gt;.git&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;&lt;em&gt;stash&lt;/em&gt; - a kind of scratch pad or clipboard for the developer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2 questions which will completely define and explain any command:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How does this command move information across the 4 areas?&lt;/li&gt;
&lt;li&gt;How does this command change the repository?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some useful git log commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git log --graph --decorate --oneline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --patch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log -- &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Distributed Workflow patterns. This is the social side of git: how git users on a team use it. These are useful terms for fruitful discussion.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Distribution models: how sourcecode is shared among repositories
&lt;ul&gt;
&lt;li&gt;Peer-to-peer: developers pulling from each other&#39;s repositories&lt;/li&gt;
&lt;li&gt;Centralized: one repository holds the canonical version&lt;/li&gt;
&lt;li&gt;Pull-request model: devs do not push directly, but request&lt;/li&gt;
&lt;li&gt;hierarchical model: some devs are gatekeepers to canonical repositories&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Branching models: how branches are used
&lt;ul&gt;
&lt;li&gt;Stable versus unstable (does a branch allow broken code?)&lt;/li&gt;
&lt;li&gt;Integration (is there a &amp;quot;master&amp;quot; branch to which all repos merge/rebase?)&lt;/li&gt;
&lt;li&gt;Release branch&lt;/li&gt;
&lt;li&gt;Feature branch&lt;/li&gt;
&lt;li&gt;Hotfix branch (versus cherry-pick, which is a rebase)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Constraints: allowed, disallowed and preferred methods
&lt;ul&gt;
&lt;li&gt;Merge versus rebase (messy truth versus clean inaccuracy)&lt;/li&gt;
&lt;li&gt;Gatekeeping and responsibility (do some devs have privs)&lt;/li&gt;
&lt;li&gt;&amp;quot;Don&#39;t push when the build is broken&amp;quot; (CI error)&lt;/li&gt;
&lt;li&gt;clean history before push to integration?&lt;/li&gt;
&lt;li&gt;Every pull request linked to an issue/ticket number&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gitflow: such an &lt;a href=&quot;https://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;influential model&lt;/a&gt; deserves separate discussion&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don&#39;t &amp;quot;just use Gitflow&amp;quot;. It is not optimal for every project, e.g.:
&lt;ul&gt;
&lt;li&gt;web apps that need to maintain only one release branch&lt;/li&gt;
&lt;li&gt;project with continuous integration in which features released immediately, Gitflow has too many layers&lt;/li&gt;
&lt;li&gt;projects with long term feature development
&lt;ul&gt;
&lt;li&gt;large code bases touching everywhere could cause integration headaches&lt;/li&gt;
&lt;li&gt;perhaps better to integrate often, even when features are not yet complete&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Growing a workflow: Avoid designing a complete workflow from the beginning, but start small and grow it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sample starter workflow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Distribution model: Centralized&lt;/li&gt;
&lt;li&gt;Branching model:
&lt;ul&gt;
&lt;li&gt;One integration branch (master)&lt;/li&gt;
&lt;li&gt;One feature branch per feature&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Constraints:
&lt;ul&gt;
&lt;li&gt;Keep master stable, fix ASAP if it breaks&lt;/li&gt;
&lt;li&gt;Integrate feature branches every few days&lt;/li&gt;
&lt;li&gt;User merge over rebase by default&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;quot;Simple, clear purpose and principles give rise to complex intelligent behavior. Complex rules and regulations give rise to simple stupid behavior.&amp;quot;&lt;/p&gt;
&lt;p&gt;-- Dee Hock&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Personal thoughts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Other constraints I have seen:&lt;/li&gt;
&lt;li&gt;Merge feature branches into the master branch, but clean up with interactive rebase the history of the branch before doing so.&lt;/li&gt;
&lt;li&gt;Do not rebase the history of the master branch.&lt;/li&gt;
&lt;li&gt;Features that are not released yet should be hidden by default, to be turned on with an internal flag&lt;/li&gt;
&lt;li&gt;Branches should have an associated issue number, and commit messages should reference that number (required a githook to enforce)&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
</feed>
